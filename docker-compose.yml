# /docker-compose.yml
version: '3.3'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VIRTUAL_HOST=dawooddilawar.com
      - LETSENCRYPT_HOST=dawooddilawar.com
      - NEXT_PUBLIC_API_URL=https://api.dawooddilawar.com
    networks:
      - proxy-network
      - internal-network
    depends_on:
      - backend
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - VIRTUAL_HOST=api.dawooddilawar.com
      - VIRTUAL_PORT=8000
      - LETSENCRYPT_HOST=api.dawooddilawar.com
    working_dir: /app
    volumes:
      - ./backend:/app
    networks:
      - proxy-network
      - internal-network
      - backend-network
    depends_on:
      - postgres
    restart: always

  postgres:
    image: ankane/pgvector:v0.5.1
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - internal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    restart: always

volumes:
  postgres_data:

networks:
  proxy-network:
    external: true
  internal-network:
    internal: true
  backend-network:
    driver: bridge